//1.理论学习；  2.复习；	3.自问自答	4.选几个练习一下（实践）	5.再次自问自答	

· 知道你的项目到底是做什么的，有哪些功能。

· 知道你做的项目在整个项目中所处的位置及作用，并能清晰地阐述模块间的调用关系。

· 知道你项目的整体架构和使用到的中间件，并对中间件的原理有一定的了解。

· 能流畅地阐述自己在项目中解决过的比较复杂的问题。

1.接口和抽象类的区别.(https://www.cnblogs.com/dolphin0520/p/3811437.html)
2.栈和队列的区别.(https://www.jianshu.com/p/194c036b87f3)
3.Int和Integer的区别和自动拆箱/装箱的相关问题
https://www.cnblogs.com/dolphin0520/p/3780005.html
4.常量池相关问题.   -->配合作用域问. String str = new String("abc");  str = "abc";
5.你用过HashMap吗？说说HashMap的底层原理？你为什么用到它？(https://blog.csdn.net/baidu_28068985/article/details/78529246)
6.当两个对象的hashcode相同会发生什么?这时如何获取值对象？
7.HashMap默认负载因子和大小是多少？如果HashMap的大小超过了负载因子(load factor)定义的容量，会怎样？
8.你了解重新调整HashMap大小存在什么问题吗？为什么竞争条件发生就死循环了？（因为1.7的头插法引起的，比如三个key的hashCode相同，此时T1在指针操作前阻塞了，等到T2全部执行完，T1继续执行，这时候可能发生。jdk1.7里面发生的,1.8尾插法修复了死循环的问题）
9.我们可以使用自定义的对象作为键吗？
10.HashSet、HashTable、LinkedHashMap、ConcurrentHashMap与HashMap区别？  https://www.cnblogs.com/java-chen-hao/p/10320783.html
11.讲讲ConcurrentHashMap底层原理？(put方法里面跳出的while循环的条件，以及如何保证线程安全.---》待详细解答:https://www.cnblogs.com/jajian/p/10385377.html)		
	为什么要先初始化segments[0]? 收集所有HashMap、ConcurrentHashMap相关的问题并解答ConcurrentHashMap相关的问题并解答
12.说说ArrayList、Map、Set底层原理，它们线程安全吗？要是线程不安全该如何解决呢？Vector、Collections. 、集合不安全之写时修改异常	（https://www.cnblogs.com/cy0628/p/15272417.html）
13.jdk1.7版本和1.8版本的HashMap的区别? **	https://blog.csdn.net/qq_38685503/article/details/88430788
14.HashMap能不能排序？HashMap的长度为什么要是2的幂次方？
答：1）HashMap不能排序，可以转为List后再转成LinkedHashMap，可对key、可对value进行排序。2）为了减少Hash碰撞，尽量使Hash算法的结果均匀分布. index = hashCode("hangzhou") & (Length - 1) ;index做与运算时，例如Length若为9,length-1为1000,此时hashCode不管为多少，index都为8或0，有些甚至根本不会出现，反观2的n次方，尽可能的实现了hashCode&(length-1)后的随机性.
15.创建线程的几种方式？Wait，sleep分别是谁的方法，区别？线程间的通信方式？(https://segmentfault.com/a/1190000022878543;)	https://www.jianshu.com/p/25e959037eed
16.介绍下什么是死锁(四个必要条件)，遇见过死锁吗？你是怎么排查的。（可以通过jps排查）（https://www.jianshu.com/p/e9de87bc2906）
17.创建线程池的几种方式，线程池有什么好处?	(https://segmentfault.com/a/1190000037674645)
18.Synchronized、Lock、ReentrantLock的区别，用法及原理?(https://juejin.cn/post/6844903695298068487)
19.ThreadLocal的用法和原理? (https://juejin.cn/post/6844903802252820487;)-->视频详细了解
20.Volatile关键字的作用和原理.	笔记	
21.说说对公平锁，非公平锁，可重入锁，自旋锁，读写锁的理解？	笔记
22.CAS是什么及底层原理？   笔记	
23.ArrayBlockingQueue，LinkedBlockingQueue，SynchronousQueue等等阻塞队列的理解?	 笔记
24.ThreadPoolExecutor的传入参数及内部工作原理?(https://www.cnblogs.com/nullzx/p/5184164.html)
25.给你一个具体的业务场景，让你使用ThreadPoolExecutor创建一个适合的线程池.(https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html)
26.分布式环境下，怎么保证线程安全?	并发编程,分布式锁
27.JVM内存机制？(笔记需多背一背；https://zhuanlan.zhihu.com/p/38056939;首先一张JVM内存图要画的出来,以及各个区的作用。然后是四大垃圾回收算法、七大垃圾收集器)
28.介绍下垃圾收集机制，垃圾收集有哪些算法，各自的特点?	笔记
29.聊聊GC，谈谈Major GC，FullGC区别，垃圾收集器有哪些，他们的区别？（https://blog.csdn.net/dl674756321/article/details/108130050）
30.OutOfMemeryError这个错误你遇到过吗？你是怎么解决处理的？	笔记
31.JVM调优有哪些参数，介绍下，线上环境上，你是怎么查看JVM的参数并进行调优的？	笔记
32.能不能自己写一个类叫java.lang.String（类加载的过程，双亲委派模型;不是很懂）（https://www.jianshu.com/p/b2b332ad0514）
33.Spring用了哪些设计模式？Spring注入bean的方式？对SpringIOC和SpringAOP的理解？(https://www.zhihu.com/question/23277575/answer/169698662;https://cloud.tencent.com/developer/news/596714)
34.Spring事务隔离级别和传播机制？(https://blog.csdn.net/zhouxukun123/article/details/79874797)
35.Mybatis的缓存机制（一级缓存和二级缓存），Mybatis的mapper文件中#和$的区别?	(看视频做个详细的笔记)
35.SpringMVC的流程? (https://www.jianshu.com/p/8a20c547e245)
36.线程池的拒绝策略	笔记
37.讲讲创建单一的/固定数的/可变的三种线程池的方法，你在工作中用哪个多？超级大坑		笔记
38.你在工作中是如何使用线程池的?是否自定义过线程池使用？	笔记
39.合理配置线程池你是如何考虑的？	笔记

===============================================
蚂蚁花呗一面（一个小时）：
1.Java容器有哪些？哪些是同步容器，哪些是并发容器？	（https://blog.csdn.net/weixin_41884118/article/details/88054094）
2.ArrayList和LinkedList的插入和访问的时间复杂度？	（https://www.jianshu.com/p/9fdfa125c00e）
3.java反射原理，注解原理？ （https://zhuanlan.zhihu.com/p/58793884；https://cloud.tencent.com/developer/article/1522675）
4.新生代分为几个区？使用什么算法进行垃圾回收？为什么使用这个算法？
5.HashMap在什么情况下会扩容，或者有哪些操作会导致扩容？	笔记
6.HashMap push方法的执行过程？	笔记
7.HashMap检测到hash冲突后，将元素插入在链表的末尾还是开头？	笔记
8.1.8还采用了红黑树，讲讲红黑树的特性，为什么人家一定要用红黑树而不是AVL、B树之类的？（了解平衡二叉树、红黑树、B树、B+树）
9.https和http区别，有没有用过其他安全传输手段？(https://www.runoob.com/w3cnote/http-vs-https.html)
10.线程池的工作原理，几个重要参数，然后给了具体几个参数分析线程池会怎么做，最后问阻塞队列的作用是什么？
11.linux怎么查看系统负载情况？(笔记)
12.请详细描述springMVC处理请求全流程？(https://www.jianshu.com/p/8a20c547e245)
13.spring 一个bean装配的过程？（看不太懂，找个视频，做个笔记总计）
14.讲一讲AtomicInteger，为什么要用CAS而不是synchronized？	笔记

-----------------------------------------------------------
美团一面经验：
1.最近做的比较熟悉的项目是哪一个，画一下项目技术架构图。
2.JVM老年代和新生代的比例。
3.YGC和FGC发生的具体场景。
4.jstack,jmap,jutil分别的意义？如何线上排查JVM的相关问题？
5.线程池的构造类的方法的5个参数的具体意义？
6.单机上一个线程池正在处理服务如果忽然断电怎么办(正在处理和阻塞队列里的请求怎么处理)?
7.使用无界阻塞队列会出现什么问题？
8.接口如何处理重复请求？

-----------------------------------------------------------
百度一面经验：
1.介绍一下集合框架？
2.hashmap hashtable底层实现什么区别？hashtable和concurrenthashtable呢？
3.线程池用过吗，都有什么参数？底层数据结构是什么？
4.synchronized和Lock什么区别？synchronized什么时候是对象锁，什么时候是全局锁，为什么？
5.ThreadLocal是什么，底层如何实现？写一个例子。
6.volitile的工作原理？
7.CAS知道吗，如何实现的？
8.请至少用四种方法写一个单例模式？
9.请介绍一下JVM内存模型？用过什么垃圾回收器，都说说？
10.线上发送频繁full gc如何处理？CPU使用率过高怎么办？
11.如何定位问题？如何解决问题？说一下解决思路和处理方法
12.知道字节码吗？字节码有哪些？Integer x = 5，int y = 5,比较x=y都经过哪些步骤？
13.讲讲类加载机制，都有哪些类加载机制？ 这些类加载器都加载哪些文件？
14.手写一下类加载Demo。
15.知道osgi吗？他是如何实现的？
16.请问你做过哪些JVM优化？使用什么方法达到什么效果？
17.clasforName("java.lang.String")和String classgetClassLoader() LoadClass("java.lang.String")有什么区别呢？

-----------------------------------------------------------
今日头条：
一、面试第 1 轮
1. linux 网络模型
2. b+树
3. 阻塞队列
4. redis 和 MongoDB 的区别。几个概念对比，还有底层实现。
5. 算法题： merge k sorted list，时间复杂度如何？
6. HashMap 如果一直 put 元素会怎么样？hashcode 全都相同如何？equals 方法都相同如何？
7. ApplicationContext 的初始化过程？初始化过程中发现循环依赖 Spring 是如何处理的。
8. GC 用什么收集器？收集的过程如何？哪些部分可以作为 GC Root?
9. Volatile 关键字，指令重排序有什么意义？
10.synchronied 怎么用？
11.并发包里的原子类有哪些，怎么实现？cas 在 CPU 级别用什么指令实现的？
12.Redis 数据结构有哪些？如何实现 sorted set？这种数据结构在极端情况下可能有什么问题？二叉平衡树？
13.系统设计题：一个推送场景，50 条内容，定时推送，先推 5%用户，一段时间后再找出效果最好的几条，推给所有用户。设计相关库表，系统模块, 需要可以落地，有伪代码
14.MySql 索引是什么数据结构？B tree 有什么特点？优点是什么？
15.慢查询怎么优化？
16.项目：cache 设计，MQ 丢失消息，RPC 使用场景。各部分职责，有哪些优化点。
17.ThreadLocal 使用场景
18.Redis 回收和备份
19.项目设计问题——主要是针对项目找漏洞，然后给出优化方案
20.遇到的坑，怎么解决，后续总结。

二、面试第 2 轮
1. 那些问题对你挑战最大？
2. JDK 1.8 ConcurrentHashMap 做过什么改进？HashMap 死锁？
3. 标记的时候怎么找出栈上的 GC Root？说出一种可能的方案，存在什么问题？
4. 字节码有了解过吗？
5. 本地缓存怎么优化空间？（提出 BitMap）BitMap 可行吗？怎么验证可行性？如果不可行，怎么证伪？
6. 其他语言有了解过吗？Scala 的集合有什么特性？python 有什么高级特性？
7. 怎么学习新技术？哪些是基础技术？
8. 在部门中是什么角色定位？
9. JDK 1.8 比前一个版本有哪些改进？
10. ParNew 收集过程，如何调优 ParNew？如何减少 full gc？调大 YoungGen 有什么好处坏处？
11. OpenAPI
12. 平衡二叉树13. 业务逻辑
14. MySQL
15. 服务设计题
16. web 架构设计
17. Pack
18. http 协议
19. 爬虫
20. Java Agent
21. Zookeeper
22. LoadBalance
23. 分布式 ID
24. Nginx
25. Cookie
26. Session
27. GC
28. 手写 LRU 缓存
29. 将现有线性存储结构改成环形结构
30. Redis IO 模型
31. MQ 架构对比
32. 各种缓存 memcache，MongoDB，EhCache，Guava，Caffeine 等等，使用场景
33. 数据库乐观锁悲观锁。在 JDK 和其他中间件的体现。
34. 线程池，核心参数，扩容原理，使用注意点
35. 数据库主从同步，延迟
36. 数据库和缓存一致性问题，出现的场景，解决方案
37. Spring IOC AOP
38. 一致性哈希算法
39. RPC 服务发现与注册
40. 服务提供方不稳定，频繁变动如何提升自身稳定性
三、面试第 3 轮—HR
1. 离职原因
2. 学习习惯
3. 兴趣爱好
4. 为什么选择本公司
5. 本人的优缺点
6. 唠家常
四、总结
主要看技术能力，沟通能力和态度（不会就是不会，不要说百度就知道）。

-----------------------------------------------------------
京东金融面试:
1、Dubbo超时重试；Dubbo超时时间设置

2、如何保障请求执行顺序

3、分布式事物与分布式锁（扣款不要出现负数）

4、分布式session设置

5、执行某操作，前50次成功，第51次失败a全部回滚b前50次提交第51次抛异常，ab场景分别如何设置Spring（传播性）

6、Zookeeper有哪些用

7、JVM内存模型

8、数据库垂直和水平拆分

9、MyBatis如何分页；如何设置缓存；MySQL分页

10、熟悉IO么？与NIO的区别，阻塞与非阻塞的区别

11、分布式session一致性

12、分布式接口的幂等性设计「不能重复扣款」

-----------------------------------------------------------
美团面试问题汇总:
一轮技术面：
一、jvm相关
1.对象在jvm中是怎么存储的？
2.对象头信息里面有哪些东西？
3.jvm内部如何划分？常量池在哪里？
4.写一小段程序使栈溢出，堆溢出？

二、GC
1.GC Root如何确定，哪些对象可以作为GC Root？
2.GC如何分代的？没代用什么算法回收？
3.CMS过程是怎样的？内部使用什么算法做垃圾回收？
4.分代垃圾回收过程？

三、并发相关
1.Java中有哪几种锁？
2.Synchronized内部原理？
3.ReentrantLock内部实现？
4.HashMap，HashTable，ConcurrentHashMap区别？内部实现？

四、数据库相关
1.innoDB索引数据结构？
2.BTree  B+Tree区别？为什么使用B+Tree？

五、算法
1.写程序判断一棵树是不是完全对称的二叉树？
2.写程序判断两颗二叉树是不是相同？

六、其他
1.Comparable和Comparator区别？
2.内存溢出和内存泄漏分别是指什么？

二轮技术面：
1.kafka底层设计介绍？
2.dubbo如何提供服务？有机器宕掉怎么检测出来？如何找到服务？
3.redis是单例的吗？
4.mysql的整体架构是怎样的？
5、innodb索引介绍一下？
6.innodb主键索引和非主键区别

-----------------------------------------------------------
蚂蚁金服电话二面（85分钟）：
1、自我介绍、工作经历、技术栈

2、项目中你学到了什么技术？（把三项目具体描述了很久）

3、微服务划分的粒度

4、微服务的高可用怎么保证的？

5、常用的负载均衡，该怎么用，你能说下吗？

6、网关能够为后端服务带来哪些好处？

7、Spring Bean 的生命周期

8、xml 中配置的 init、destroy 方法怎么可以做到调用具体的方法？

9、反射的机制

10、Object 类中的方法

11、hashcode 和 equals 方法常用地方

12、对象比较是否相同

13、hashmap put 方法存放的时候怎么判断是否是重复的

14、Object toString 方法常用的地方，为什么要重写该方法

15、Set 和 List 区别？

16、ArrayList 和 LinkedList 区别

17、如果存取相同的数据，ArrayList 和 LinkedList 谁占用空间更大？

18、Set 存的顺序是有序的吗？

19、常见 Set 的实现有哪些？

20、TreeSet 对存入对数据有什么要求呢？

21、HashSet 的底层实现呢

22、TreeSet 底层源码有看过吗？

23、HashSet 是不是线程安全的？为什么不是线程安全的？

24、Java 中有哪些线程安全的 Map？

25、Concurrenthashmap 是怎么做到线程安全的？

26、HashTable 你了解过吗？

27、如何保证线程安全问题？

28、synchronized、lock

29、volatile 的原子性问题？为什么 i++ 这种不支持原子性？从计算机原理的设计来讲下不能保证原子性的原因

30、happens before 原理

31、cas 操作

32、lock 和 synchronized 的区别？

33、公平锁和非公平锁

34、Java 读写锁

35、读写锁设计主要解决什么问题？

36、你项目除了写 Java 代码，还有前端代码，那你知道前端有哪些框架吗？

37、MySQL 分页查询语句

38、MySQL 事务特性和隔离级别

39、不可重复读会出现在什么场景？

40、sql having 的使用场景

41、前端浏览器地址的一个 http 请求到后端整个流程是怎么样？能够说下吗？

42、http 默认端口，https 默认端口

43、DNS 你知道是干嘛的吗？

44、你们开发用的 ide 是啥？你能说下 idea 的常用几个快捷键吧？

45、代码版本管理你们用的是啥？

46、git rebase 和 merge 有什么区别？

-----------------------------------------------------------答案:(https://www.jianshu.com/p/fd4eca11f0ea)
1.在你的项目中，哪些数据是数据库和redis缓存双写一份的？如何保证双写一致性？
2.系统上线，Redis缓存系统是如何部署的?
3.系统上线，Redis缓存给了多大的总内存？命中率有多高？抗住了多少QPS？数据流回源会有多少QPS？
4.热Key大Value问题，某个key出现了热点缓存导致缓存集群中的某个机器负载过高？如何发现并解决?
5.超大Value打满网卡的问题如何规避?
6.你过往的工作经历中，是否出现过缓存集群事故？说说怎么保证高可用的？
7.平时如何监控缓存集群的QPS和容量?
8.缓存集群如何扩容？
9.说下redis的集群原理和选举机制?
10.Key寻址算法都有哪些？
11.Redis线程模型画个图说说?
12.Redis内存模型画个图说说?
13.Redis中的Lua有没有使用过? 可以用来做什么? 为什么可以这么用?
14.缓存穿透和缓存雪崩？

-----------------------------------------------------------GC
1.JVM垃圾回收的时候如何确定垃圾？
2.你说你做过JVM调优和参数配置，请问如何查看JVM系统默认值？
3.你平时用过的常用JVM基本配置参数有哪些？
4.请谈谈你对OOM的认识.
5.GC回收算法和垃圾回收器的关系？另外，串行收集/并行收集/并发收集/STW是什么？
6.怎么查看服务器默认的垃圾收集器是哪个？生产上你是如何配置垃圾收集器的？谈谈你的理解。
7.G1垃圾收集器
8.强引用、软引用、弱引用、虚引用分别是什么？
9.生产环境服务器变慢，诊断思路和性能评估谈谈？
10.加入生产环境出现cpu占用过高，请谈谈你的分析思路和定位
11.对于JDK自带的JVM监控和性能分析工具用过哪些？一般你是怎么用的？
12.JVM的字节码指令接触过吗？简单讲讲



----------------------------------------------------------》时间节点
//1.2022.02.08 ---- 2022.03.08 ===> 视频全部过完，每天车上复习半小时，到公司后再复习半小时，主要题目全部刷完（尽量在自己的理解之上）。
目标：不管熟练程度、理解程度如何，先全部过了一遍，尽可能熟悉。简历写好先投出去，形成面试基础条件。



































































